# -*- coding: utf-8 -*-
"""final_project(수정중).ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1f4bNMyJ5FHsrz9lu_TtgJA8jb6g-avrv

# 졸업 프로젝트
### 건양대학교 융합IT 학과 18681032 한규리
* 주제 : 공공 데이터를 이용한 데이터 분석 및 시각화
      * 서울 내의 이디야 카페 분포
      * 서울 내의 공영주차장 분포
      * 서울 지하철 2호선의 평균 승하차 인원 수
  - 프로젝트 기간 : 2023.7.8 ~ 2023.12.12
  - 자료 출처 : <br>
    1. [한국 문화 정부원 - 전국 공영주차장 표준데이터](https://www.bigdata-culture.kr/bigdata/user/data_market/detail.do?id=6365bfc0-2531-41b6-bd6e-2e42de49dd6b)<br>
    2. [공공데이터 포털 - 소상공인시장진흥공단_상가(상권)정보](https://www.data.go.kr/tcs/dss/selectFileDataDetailView.do?publicDataPk=15083033)
    3. [서울 열린데이터 광장 - 서울시 공영주차장 안내 정보](https://data.seoul.go.kr/dataList/OA-13122/A/1/datasetView.do;jsessionid=B0A8199C5DD581C8D8731861E69A9CC8.new_portal-svr-21)
  - 사용 파일 :
    1. 소상공인시장진흥공단_상가(상권)정보_서울_202309.csv
    2. 전국주차장정보표준데이터.csv
    3. skorea_municipalities_geo_simple.json

### 1. 필요한 라이브러리 설치 및 데이터 로드

* matplotlib 한글 폰트 깨짐 현상 해결
"""

!sudo apt-get install -y fonts-nanum
!sudo fc-cache -fv
!rm ~/.cache/matplotlib -rf

# 이디야
import folium
import json
import glob
import os
import pandas as pd
import numpy as np

from google.colab import drive
drive.mount('/content/drive')

filename = '/content/drive/MyDrive/Colab Notebooks/project/소상공인시장진흥공단_상가(상권)정보_서울_202309.csv'

df = pd.read_csv(filename, low_memory=False)
df.head()

"""### 2. 필요한 데이터 추출"""

dataset = df[['상호명', '상권업종소분류명', '시도명', '시군구명', '위도', '경도']]

dataset.head()

df_coffee = dataset[(dataset['상권업종소분류명']=='카페')&(dataset['시도명']=='서울특별시')]
df_coffee.index = range(len(df_coffee))

print('서울시 내 커피 전문점 점포 수 :', len(df_coffee))
df_coffee.head()

df_seoul_ediya = df_coffee[df_coffee['상호명'].str.contains('이디야')]

df_seoul_ediya.index = range(len(df_seoul_ediya))

print('서울시 내 이디야 점포 수 :', len(df_seoul_ediya))

df_seoul_ediya.head()

"""* 서울 구별 이디야 점포 수"""

ediya_gu = df_seoul_ediya.groupby('시군구명')['상호명'].count().to_frame().sort_values(by='상호명', ascending=False)
ediya_gu = ediya_gu.reset_index()
ediya_gu = ediya_gu.set_index('시군구명')

ediya_gu

"""### 3. 데이터 분석 및 시각화

1) 지도 출력에 필요한 파일 로드
"""

# 지도 geo_path 사용
geo_path = '/content/drive/MyDrive/Colab Notebooks/project/skorea_municipalities_geo_simple.json'
geo_str = json.load(open(geo_path, encoding='utf-8'))

"""2) 공영주차장 데이터 불러오기"""

# 공영주차장
import requests
import pandas as pd
import math
import folium

url='http://openapi.seoul.go.kr:8088/554f76544f6b6575313135645942635a/json/GetParkInfo/1/5/'

re=requests.get(url)
rjson=re.json()
total_num=int(rjson['GetParkInfo']['list_total_count'])

parking_name=[]
addr=[]
pay_yn=[]
full_month_fee=[]
rates=[]
time_rates=[]
lat=[]
long=[]
cap=[]
holiday=[]

for i in range(1, math.ceil(total_num/1000)+1):

  end=i+1000
  start=end-1000 +1

  if end >total_num:
    end = total_num

  url=f'http://openapi.seoul.go.kr:8088/554f76544f6b6575313135645942635a/json/GetParkInfo/{start}/{end}'
  re=requests.get(url)
  rjson=re.json()

  for u in rjson['GetParkInfo']['row']:
    parking_name.append(u['PARKING_NAME'])
    addr.append(u['ADDR'])
    pay_yn.append(u['PAY_NM'])
    full_month_fee.append(u['FULLTIME_MONTHLY'])
    rates.append(u['RATES'])
    time_rates.append(u['TIME_RATE'])
    lat.append(u['LAT'])
    long.append(u['LNG'])
    cap.append(u['CAPACITY'])
    holiday.append(u['HOLIDAY_PAY_NM'])

  df=pd.DataFrame({'주차장 명':parking_name, '주소':addr, '유료 여부':pay_yn, '월 정기권 금액':full_month_fee,
                   '기본 주차 요금':rates, '기본 단위': time_rates, '위도':lat,
                   '경도':long, '주차 가능 수':cap, '주말 개장 여부': holiday})

df = df[['주차장 명', '주소', '위도', '경도']]

car1=df.drop_duplicates() # 겹치는 데이터 제거

car1.head(1000)

# 공영 주차장 추가

filename = '/content/drive/MyDrive/Colab Notebooks/project/전국주차장정보표준데이터.csv'

car2 = pd.read_csv(filename, encoding='utf-8')
car2.head()

"""3) 지하철 2호선 데이터 불러오기"""

# 지하철 2호선

import pandas as pd
import requests
import re

key='4e79744c7974736238316564466347'
re=requests.get(f'http://openapi.seoul.go.kr:8088/{key}/json/CardSubwayStatsNew/1/999/20230601')

subway=dict()

for i in range(1, 32):
  if i < 10:
    re = requests.get(f'http://openapi.seoul.go.kr:8088/{key}/json/CardSubwayStatsNew/1/999/2023050{i}')
    data = re.json()
    date = '2023050' + str(i)
  else:
    re = requests.get(f'http://openapi.seoul.go.kr:8088/{key}/json/CardSubwayStatsNew/1/999/202305{i}')
    data = re.json()
    date = '202305' + str(i)
  station = []
  take_on = []
  take_off = []

  for v in data['CardSubwayStatsNew']['row']:
    if v['LINE_NUM'] == '2호선':
      station.append(v['SUB_STA_NM'])
      take_on.append(v['RIDE_PASGR_NUM'])
      take_off.append(v['ALIGHT_PASGR_NUM'])

  subway[date] = [
                  { 'station':station, '승차인원':take_on, '하차인원':take_off}
  ]

"""* 역별 지하철 평균 승하차 승객 수"""

df=pd.DataFrame(index=subway['20230501'][0]['station'],columns=subway.keys())

for i in subway:
  for v in subway[i]:
    df[i]=v['승차인원']
ride=pd.DataFrame(df.mean(axis=1),columns=['평균 승차 승객 수'])

fd=pd.DataFrame(index=subway['20230501'][0]['station'],columns=subway.keys())
for i in subway:
  for v in subway[i]:
    df[i]=v['하차인원']
  off=pd.DataFrame(df.mean(axis=1),columns=['평균 하차 승객 수'])

  table=pd.merge(left=ride,right=off,how='inner',left_on=ride.index,right_on=off.index)
  table=table.rename(columns={'key_0':'역명'})

table

table['평균 승차 승객 수']=table['평균 승차 승객 수'].astype(int)
table['평균 하차 승객 수']=table['평균 하차 승객 수'].astype(int)
top10_ride=table.sort_values(by='평균 승차 승객 수',ascending=False)
top10_off=table.sort_values(by='평균 하차 승객 수',ascending=False)

"""* 5월 평균 승하차 인원 수 시각화"""

import matplotlib.pyplot as plt

# 나눔고딕 폰트 설정
plt.rc('font', family='NanumGothic')

plt.figure(figsize = (16, 8))

plt.bar(top10_ride['역명'][:10], top10_ride['평균 승차 승객 수'][:10])
for x, y in enumerate(list(top10_ride['평균 승차 승객 수'][:10])):
  plt.text(x, y, y, fontsize=10, color='#ff0000',
           horizontalalignment='center', verticalalignment='bottom')

plt.title('5월 평균 승차 인원 수 Top10 2호선 역')
plt.show()

plt.figure(figsize = (16, 8))

plt.bar(top10_off['역명'][:10],top10_off['평균 하차 승객 수'][:10])
for x, y in enumerate(list(top10_off['평균 하차 승객 수'][:10])):
  plt.text(x, y, y, fontsize=10, color='#ff0000',
           horizontalalignment='center', verticalalignment='bottom')

plt.title('5월 평균 하차 인원 수 Top10 2호선 역')
plt.show()

"""* 지하철 역 위치 데이터프레임에 저장"""

import re
table['역명']=table['역명'].apply(lambda x: re.sub(r'\([^)]*\)', '',x) if '(' in x else x)
table['역명']=table['역명'].apply(lambda x:x+'역')

x=[]
y=[]
x = []
y = []

for z in table['역명']:
    urI = 'https://dapi.kakao.com/v2/local/search/keyword.json?query={}'.format(z)
    headers = {
        "Authorization": "KakaoAK df840192deff85fa2317bd38da2294a6"
    }
    response = requests.get(urI, headers=headers).json()

    # documents 리스트가 비어있는지 확인
    if 'documents' in response and response['documents']:
        places = response['documents'][0]
        x.append(places['y'])
        y.append(places['x'])
    else:
        # 예외 처리: 결과가 없을 때의 동작 설정
        x.append(None)
        y.append(None)

table['latitude'] = x
table['longitude'] = y


table

"""4) 이디야 지도 시각화"""

import folium
from folium.plugins import MarkerCluster
from folium import Choropleth

# 위치 설정
loc = [37.5642135, 127.0016985] # 위도(N), 경도(E)
data2_size = len(df_seoul_ediya)

# 지도 정의
map = folium.Map(location=loc, zoom_start=14)
Choropleth(
    geo_data=geo_str,
    data=ediya_gu['상호명'],
    columns=[ediya_gu.index, ediya_gu['상호명']],
    fill_color='YlGnBu',
    key_on='feature.id'
).add_to(map)

marker_cluster = MarkerCluster().add_to(map)

# 이디야 위치
for i in range(data2_size):

    folium.Marker(list(df_seoul_ediya.iloc[i][['위도', '경도']]),
                 popup=folium.Popup(df_seoul_ediya.iloc[i]['상호명']),
                 icon=folium.Icon(color='blue')).add_to(marker_cluster)

map

"""5) 지하철 평균 승하차 인원 수 지도 시각화"""

loc = [37.540632, 126.981558]
map1 = folium.Map(location=loc, zoom_start=13)
# 지하철 위치 및 평균 승차/하차 승객 수
for i in range(0, 50):
    latitude = table.iloc[i]['latitude']
    longitude = table.iloc[i]['longitude']
    avg_ride_passengers = table.iloc[i]['평균 승차 승객 수']
    avg_exit_passengers = table.iloc[i]['평균 하차 승객 수']

    # 지하철 위치 마커
    folium.Marker([latitude, longitude], popup=table.iloc[i]['역명'], icon=folium.Icon(color='orange')).add_to(map1)

    # 평균 승차 승객 수에 따른 원 추가
    folium.CircleMarker([latitude, longitude], radius=avg_ride_passengers / 500, popup=table.iloc[i]['역명'],
                        color='#3186cc', fill_color='#3186cc').add_to(map1)

    # 평균 하차 승객 수에 따른 원 추가
    folium.CircleMarker([latitude, longitude], radius=avg_exit_passengers / 500, popup=table.iloc[i]['역명'],
                        color='#cc4831', fill_color='#cc4831').add_to(map1)

map1

"""6) 공영주차장 위치 및 분포 현황 지도 시각화"""

loc = [37.5642135, 127.0016985]
map2 = folium.Map(location=loc, zoom_start=12)

# 강서구, 영등포구, 양천구 주차장 위치 추가
for i in range(len(car2)):

    marker02 =  folium.Marker((car2.iloc[i][['위도', '경도']]),
                 popup=folium.Popup(car2.iloc[i]['주차장명']),
                 icon=folium.Icon(icon="car", prefix="fa", color='black'))
    marker02.add_to(map2)

# 주차장 위치
for i in range(len(car1)):

    marker02 =  folium.Marker((car1.iloc[i][['위도', '경도']]),
                 popup=folium.Popup(car1.iloc[i]['주차장 명']),
                 icon=folium.Icon(icon="car", prefix="fa", color='black'))
    marker02.add_to(map2)

map2

"""### 4) 결과"""

loc = [37.540632, 126.981558]
data2_size = len(df_seoul_ediya)

# 지도 정의
map = folium.Map(location=loc, zoom_start=13)
Choropleth(
    geo_data=geo_str,
    data=ediya_gu['상호명'],
    columns=[ediya_gu.index, ediya_gu['상호명']],
    fill_color='YlGnBu',
    key_on='feature.id'
).add_to(map)

marker_cluster = MarkerCluster().add_to(map)

# 이디야 위치
for i in range(data2_size):

    folium.Marker(list(df_seoul_ediya.iloc[i][['위도', '경도']]),
                 popup=folium.Popup(df_seoul_ediya.iloc[i]['상호명']),
                 icon=folium.Icon(color='blue')).add_to(marker_cluster)

# 지하철 위치 및 평균 승차/하차 승객 수
for i in range(0, 50):
    latitude = table.iloc[i]['latitude']
    longitude = table.iloc[i]['longitude']
    avg_ride_passengers = table.iloc[i]['평균 승차 승객 수']
    avg_exit_passengers = table.iloc[i]['평균 하차 승객 수']

    # 지하철 위치 마커
    folium.Marker([latitude, longitude], popup=table.iloc[i]['역명'], icon=folium.Icon(color='orange')).add_to(map)

    # 평균 승차 승객 수에 따른 원 추가
    folium.CircleMarker([latitude, longitude], radius=avg_ride_passengers / 500, popup=table.iloc[i]['역명'],
                        color='#3186cc', fill_color='#3186cc').add_to(map)

    # 평균 하차 승객 수에 따른 원 추가
    folium.CircleMarker([latitude, longitude], radius=avg_exit_passengers / 500, popup=table.iloc[i]['역명'],
                        color='#cc4831', fill_color='#cc4831').add_to(map)

# 강서구, 영등포구, 양천구 주차장 위치 추가
for i in range(len(car2)):

    marker02 =  folium.Marker((car2.iloc[i][['위도', '경도']]),
                 popup=folium.Popup(car2.iloc[i]['주차장명']),
                 icon=folium.Icon(icon="car", prefix="fa", color='black'))
    marker02.add_to(map)

# 주차장 위치
for i in range(len(car1)):

    marker02 =  folium.Marker((car1.iloc[i][['위도', '경도']]),
                 popup=folium.Popup(car1.iloc[i]['주차장 명']),
                 icon=folium.Icon(icon="car", prefix="fa", color='black'))
    marker02.add_to(map)

map